import os
import logging
import json
from datetime import datetime
import time
import re

# Configure logging
log_directory = os.getenv("LOG_DIR", "logs")
os.makedirs(log_directory, exist_ok=True)
log_file = os.path.join(
    log_directory, f"llm_calls_{datetime.now().strftime('%Y%m%d')}.log"
)

# Set up logger
logger = logging.getLogger("llm_logger")
logger.setLevel(logging.INFO)
logger.propagate = False  # Prevent propagation to root logger

# Explicitly set encoding to utf-8 to handle all Unicode characters
file_handler = logging.FileHandler(log_file, encoding='utf-8')
file_handler.setFormatter(
    logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
)
logger.addHandler(file_handler)

# Simple cache configuration
cache_file = "llm_cache.json"

# Add a new utility function for JSON repair
def repair_llm_json(json_str: str) -> str:
    """
    Comprehensive repair function for JSON/JSON5 content generated by LLMs.
    Handles common issues like missing commas, unescaped quotes, newlines in strings, etc.
    
    Args:
        json_str: The potentially malformed JSON string
        
    Returns:
        Repaired JSON string that should be more likely to parse correctly
    """
    # If not a string (somehow), convert to string
    if not isinstance(json_str, str):
        json_str = str(json_str)
    
    # Record original length for logging
    original_len = len(json_str)
    
    # 1. Handle multi-line string issues (common with description fields)
    # Replace problematic newlines within quoted strings
    in_quotes = False
    quote_start = 0
    result = []
    i = 0
    
    # Process character by character to handle quotes and newlines within strings
    while i < len(json_str):
        char = json_str[i]
        
        # Handle escape sequences
        if char == '\\':
            result.append(char)
            i += 1
            if i < len(json_str):
                result.append(json_str[i])
            i += 1
            continue
            
        # Track quotes to identify string boundaries
        if char == '"':
            if not in_quotes:
                in_quotes = True
                quote_start = i
            else:
                in_quotes = False
            
        # Handle problematic newlines within strings
        if in_quotes and char in ['\n', '\r']:
            # Replace with space instead of removing entirely
            result.append(' ')
        else:
            result.append(char)
            
        i += 1
    
    json_str = ''.join(result)
    
    # 2. Fix missing commas in common contexts
    # Fix missing commas between definition fields (name, description, file_indices)
    json_str = re.sub(r'("description"\s*:\s*"[^"]*?")\s*("file_indices")', r'\1,\2', json_str)
    json_str = re.sub(r'("name"\s*:\s*"[^"]*?")\s*("description")', r'\1,\2', json_str)
    
    # Fix missing commas between JSON objects in arrays
    json_str = re.sub(r'(\}\s*)\{', r'},\{', json_str)
    
    # 3. Fix trailing commas in arrays and objects
    json_str = re.sub(r',(\s*[\]\}])', r'\1', json_str)
    
    # 4. Fix Python-style triple quotes with standard double quotes
    json_str = json_str.replace('"""', '"')
    json_str = json_str.replace("'''", "'")
    
    # 5. Fix stray unescaped quotes in strings
    json_str = re.sub(r'(?<!\\)"(?=.*":\s*")', r'\\"', json_str)
    
    # 6. Fix missing quotes around object keys
    json_str = re.sub(r'{\s*([a-zA-Z0-9_]+)\s*:', r'{"\\1":', json_str)
    
    # 7. Fix invalid JS-style comments (not valid in JSON)
    json_str = re.sub(r'//.*?\n', r'\n', json_str)
    json_str = re.sub(r'/\*.*?\*/', r'', json_str, flags=re.DOTALL)
    
    # 8. Special handling for file_indices formatting issues
    # Fix items missing commas in file_indices arrays
    json_str = re.sub(r'("\d+\s*#[^"]*?")\s*("[^,])', r'\1,\2', json_str)
    
    # 9. Fix dangling commas at the end of objects
    json_str = re.sub(r',(\s*})', r'\1', json_str)
    
    # 10. Fix mismatched bracket issues - only if we can confidently detect them
    # Count opening and closing brackets
    open_square = json_str.count('[')
    close_square = json_str.count(']')
    open_curly = json_str.count('{')
    close_curly = json_str.count('}')
    
    # If we're missing a closing bracket at the end, add it
    if open_square > close_square:
        json_str += ']' * (open_square - close_square)
    if open_curly > close_curly:
        json_str += '}' * (open_curly - close_curly)
    
    # Report changes for logging
    changes = len(json_str) - original_len
    logger.debug(f"JSON repair: Original length {original_len}, new length {len(json_str)}, changes: {changes}")
    
    return json_str

def call_llm(prompt: str, use_cache: bool = False) -> str:
    # Get the root logger to check if verbose mode is enabled
    root_logger = logging.getLogger()
    is_verbose = root_logger.level <= logging.DEBUG
    
    # Log the prompt
    logger.info(f"PROMPT: {prompt}")
    if is_verbose:
        print(f"\nSending prompt to LLM (length: {len(prompt)} chars)")
        if len(prompt) > 500:
            # Show truncated prompt in verbose mode for readability
            print(f"Truncated prompt preview: {prompt[:250]}...{prompt[-250:]}")
        else:
            print(f"Full prompt: {prompt}")

    # Check cache if enabled
    if use_cache:
        if is_verbose:
            print("LLM caching is enabled, checking for cached response...")
        # Load cache from disk
        cache = {}
        if os.path.exists(cache_file):
            try:
                with open(cache_file, "r") as f:
                    cache = json.load(f)
                if is_verbose:
                    print(f"Loaded cache with {len(cache)} entries")
            except Exception as e:
                error_msg = f"Failed to load cache: {str(e)}"
                logger.warning(error_msg)
                if is_verbose:
                    print(error_msg)

        # Return from cache if exists
        if prompt in cache:
            if is_verbose:
                print("Cache hit! Using cached response")
            logger.info(f"RESPONSE: {cache[prompt]}")
            return cache[prompt]
        elif is_verbose:
            print("Cache miss. Calling LLM API...")

    # Check which model provider to use
    model_provider = os.getenv("MODEL_PROVIDER", "groq").lower()
    
    # Check if streaming is enabled
    stream = os.getenv("STREAM", "False").lower() in ["true", "1", "yes"]
    if is_verbose and stream:
        print("Streaming mode is enabled")
    
    # Log system prompt usage if verbose
    use_system_prompt = os.getenv("USE_SYSTEM_PROMPT", "False").lower() in ["true", "1", "yes"]
    if is_verbose and use_system_prompt:
        system_prompt = os.getenv("SYSTEM_PROMPT", "You are a helpful assistant.")
        print(f"System prompt is enabled: '{system_prompt[:30]}...' (length: {len(system_prompt)})")
    
    # Determine which model will be used based on provider
    if model_provider == "openrouter":
        model = os.getenv("OPENROUTER_MODEL", "google/gemini-2.0-flash-exp:free")
        print(f"ðŸ”„ LLM API Call: Provider=[OpenRouter] Model=[{model}] Stream=[{stream}]")
        response_text = _call_openrouter(prompt, stream=stream)
    else:  # Default to groq
        model = os.getenv("GROQ_MODEL", "llama-3.3-70b-versatile")
        print(f"ðŸ”„ LLM API Call: Provider=[Groq] Model=[{model}] Stream=[{stream}]")
        response_text = _call_groq(prompt, stream=stream)
        
    if is_verbose:
        print(f"Additional debug info - Using model provider: {model_provider}")

    # Log the response
    logger.info(f"RESPONSE: {response_text}")

    # Update cache if enabled
    if use_cache:
        # Load cache again to avoid overwrites
        cache = {}
        if os.path.exists(cache_file):
            try:
                with open(cache_file, "r") as f:
                    cache = json.load(f)
            except:
                pass

        # Add to cache and save
        cache[prompt] = response_text
        try:
            with open(cache_file, "w") as f:
                json.dump(cache, f)
        except Exception as e:
            logger.error(f"Failed to save cache: {e}")

    return response_text


def _call_groq(prompt: str, stream: bool = False) -> str:
    """
    Call the Groq LLM API with the provided prompt
    """
    from groq import Groq
    import dotenv
    import sys
    
    # Ensure environment variables are loaded
    dotenv.load_dotenv(override=True)
    
    # Check if verbose mode is enabled
    root_logger = logging.getLogger()
    is_verbose = root_logger.level <= logging.DEBUG
    
    # Get API key and model from environment variables
    api_key = os.getenv("GROQ_API_KEY", "")
    model = os.getenv("GROQ_MODEL", "llama-3.3-70b-versatile")
    
    # Check if system prompt should be used
    use_system_prompt = os.getenv("USE_SYSTEM_PROMPT", "False").lower() in ["true", "1", "yes"]
    system_prompt = os.getenv("SYSTEM_PROMPT", "You are a helpful assistant.")

    if is_verbose:
        print(f"Using Groq LLM model: {model}")
        print(f"Streaming mode: {'Enabled' if stream else 'Disabled'}")
        # Check API key format without revealing the full key
        if api_key:
            print(f"API key found. Key starts with: {api_key[:4]}... (length: {len(api_key)})")
        else:
            print("WARNING: No API key found in environment variables.")
    
    if not api_key:
        raise ValueError(
            "\nERROR: GROQ_API_KEY not found in environment variables.\n"
            "Please create a .env file in the project root with your Groq API key:\n"
            "GROQ_API_KEY=your_api_key_here\n"
            "\nIf you don't have a Groq API key, you can get one at https://console.groq.com/\n"
            "\nAlternatively, consider using a different model provider by setting MODEL_PROVIDER in your .env file."
        )
    
    # Initialize Groq client
    client = Groq(api_key=api_key)
    
    try:
        # Call the Groq API
        if is_verbose:
            print("Sending request to Groq API...")
            start_time = datetime.now()
        
        # Prepare messages list based on system prompt setting
        messages = []
        if use_system_prompt:
            # Ensure critical anti-testing instruction is part of the system prompt
            anti_testing_instruction = " CRITICAL INSTRUCTION: You MUST NOT identify or discuss any form of software testing (unit, integration, E2E, etc.), testing frameworks, or test-related code unless explicitly and directly asked to do so for a specific task about testing itself. For all general analysis, summarization, or abstraction identification tasks, EXCLUDE ALL TESTING-RELATED CONTENT."
            if anti_testing_instruction not in system_prompt:
                system_prompt += anti_testing_instruction
            messages.append({"role": "system", "content": system_prompt})
        messages.append({"role": "user", "content": prompt})
        
        # Handle streaming differently if enabled
        if stream:
            full_response = ""
            
            # Using streaming API with improved error handling for network interruptions
            max_retry_attempts = 2  # Number of retry attempts for stream interruptions
            retry_count = 0
            
            while retry_count <= max_retry_attempts:
                try:
                    # If we're retrying, let the user know
                    if retry_count > 0:
                        logger.warning(f"Retrying stream request (attempt {retry_count}/{max_retry_attempts}) after interruption")
                        print(f"\n[Retrying after connection interruption, attempt {retry_count}/{max_retry_attempts}]")
                        # Add a small delay before retrying to allow network to recover
                        time.sleep(2)
                    
                    stream_response = client.chat.completions.create(
                        messages=messages,
                        model=model,
                        stream=True,
                        # Set a reasonable timeout for each chunk
                        timeout=60
                    )
                    
                    # Process the stream with interruption detection
                    print("Receiving streamed response:")
                    chunk_count = 0
                    last_chunk_time = time.time()
                    
                    for chunk in stream_response:
                        # Track successful chunks for timeout detection
                        chunk_count += 1
                        last_chunk_time = time.time()
                        
                        # Extract content from the chunk
                        if chunk.choices and chunk.choices[0].delta.content is not None:
                            content = chunk.choices[0].delta.content
                            full_response += content
                            # Print the chunk content to the console
                            print(content, end="", flush=True)
                    
                    # If we get here without exception, streaming completed successfully
                    print()  # Add a newline after the streamed response
                    break
                    
                except Exception as e:
                    error_str = str(e).lower()
                    is_connection_error = any(keyword in error_str for keyword in 
                        ["connection", "timeout", "peer closed", "reset", "eof", "broken pipe"])
                    
                    # If this looks like a network interruption and we have a partial response, retry
                    if is_connection_error and full_response and retry_count < max_retry_attempts:
                        logger.warning(f"Stream interrupted: {e}. Got {len(full_response)} chars so far. Retrying...")
                        retry_count += 1
                        # Continue to the next retry attempt
                        continue
                    else:
                        # Either not a connection error, no partial response, or max retries exceeded
                        if retry_count > 0:
                            logger.error(f"Failed to complete streaming after {retry_count} retries: {e}")
                        else:
                            logger.error(f"Error during streaming: {e}")
                        
                        # If we have a partial response, use it rather than failing completely
                        if full_response:
                            logger.warning(f"Using partial response of {len(full_response)} chars despite error")
                            print("\n[Warning: Using partial response due to connection interruption]")
                            break
                        else:
                            # No usable response, raise the exception
                            raise
            
            response = full_response
        else:
            # Non-streaming API call
            chat_completion = client.chat.completions.create(
                messages=messages,
                model=model,
                # Set a reasonable timeout for the entire request
                timeout=120
            )
            
            # Extract and return the response text
            response = chat_completion.choices[0].message.content
        
        # Calculate and log response time in verbose mode
        if is_verbose:
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            print(f"Received {'streamed ' if stream else ''}response from Groq API in {duration:.2f} seconds")
            print(f"Response length: {len(response)} characters")
            if len(response) > 500 and not stream:
                # Show truncated response in verbose mode for readability (only if not streamed)
                print(f"Truncated response preview: {response[:250]}...{response[-250:]}")
        
        return response
    except Exception as e:
        if 'invalid_api_key' in str(e):
            raise ValueError(
                f"\nERROR: Invalid Groq API key. Please check your GROQ_API_KEY in the .env file.\n"
                f"The key you provided starts with: {api_key[:4]}... (length: {len(api_key)})\n"
                f"\nIf you recently created this key, it might take a few minutes to activate.\n"
                f"\nOriginal error: {str(e)}"
            )
        else:
            # Re-raise other exceptions
            logger.error(f"Groq API call failed: {e}")
            raise




def _call_openrouter(prompt: str, stream: bool = False) -> str:
    """
    Call the OpenRouter API using the OpenAI SDK with the provided prompt
    Can use streaming if the stream parameter is True
    """
    from openai import OpenAI
    import dotenv
    import sys
    
    # Ensure environment variables are loaded
    dotenv.load_dotenv(override=True)
    
    # Check if verbose mode is enabled
    root_logger = logging.getLogger()
    is_verbose = root_logger.level <= logging.DEBUG
    
    # Get API key and model from environment variables
    api_key = os.getenv("OPENROUTER_API_KEY", "")
    model = os.getenv("OPENROUTER_MODEL", "google/gemini-2.0-flash-exp:free")

    # Check if system prompt should be used
    use_system_prompt = os.getenv("USE_SYSTEM_PROMPT", "False").lower() in ["true", "1", "yes"]
    system_prompt_content = os.getenv("SYSTEM_PROMPT", "You are a helpful assistant.")

    if is_verbose:
        print(f"Using OpenRouter with model: {model}")
        print(f"Streaming mode: {'Enabled' if stream else 'Disabled'}")
        # Check API key format without revealing the full key
        if api_key:
            print(f"API key found. Key starts with: {api_key[:4]}... (length: {len(api_key)})")
        else:
            print("WARNING: No API key found in environment variables.")
    
    if not api_key:
        raise ValueError(
            "\nERROR: OPENROUTER_API_KEY not found in environment variables.\n"
            "Please create a .env file in the project root with your OpenRouter API key:\n"
            "OPENROUTER_API_KEY=your_api_key_here\n"
            "OPENROUTER_MODEL=openai/gpt-4o (or another model ID)\n"
            "\nIf you don't have an OpenRouter API key, you can get one at https://openrouter.ai/\n"
            "\nAlternatively, consider using a different model provider by setting MODEL_PROVIDER in your .env file."
        )
    
    # Initialize OpenAI client with OpenRouter base URL
    client = OpenAI(
        base_url="https://openrouter.ai/api/v1",
        api_key=api_key
    )
    
    try:
        # Call the OpenRouter API via OpenAI SDK
        if is_verbose:
            print("Sending request to OpenRouter API...")
            start_time = datetime.now()
        
        # No extra headers needed for basic functionality
        # OpenRouter will still work without site information
        extra_headers = {}
        
        # Handle streaming differently if enabled
        if stream:
            full_response = ""
            # Using streaming API
            # Prepare messages list based on system prompt setting
            messages = []
            if use_system_prompt:
                # Ensure critical anti-testing instruction is part of the system prompt
                anti_testing_instruction = " CRITICAL INSTRUCTION: You MUST NOT identify or discuss any form of software testing (unit, integration, E2E, etc.), testing frameworks, or test-related code unless explicitly and directly asked to do so for a specific task about testing itself. For all general analysis, summarization, or abstraction identification tasks, EXCLUDE ALL TESTING-RELATED CONTENT."
                if anti_testing_instruction not in system_prompt_content:
                    system_prompt_content += anti_testing_instruction
                messages.append({"role": "system", "content": system_prompt_content})
            messages.append({"role": "user", "content": prompt})
            
            stream_response = client.chat.completions.create(
                model=model,
                messages=messages,
                stream=True,
                extra_headers=extra_headers
            )
            
            # Process the stream
            print("Receiving streamed response:")
            for chunk in stream_response:
                # Extract content from the chunk
                if chunk.choices and chunk.choices[0].delta.content is not None:
                    content = chunk.choices[0].delta.content
                    full_response += content
                    # Print the chunk content to the console
                    print(content, end="", flush=True)
            
            # Add a newline after the streamed response
            print()
            response = full_response
        else:
            # Non-streaming API call
            # Prepare messages list based on system prompt setting
            messages = []
            if use_system_prompt:
                # Ensure critical anti-testing instruction is part of the system prompt
                anti_testing_instruction = " CRITICAL INSTRUCTION: You MUST NOT identify or discuss any form of software testing (unit, integration, E2E, etc.), testing frameworks, or test-related code unless explicitly and directly asked to do so for a specific task about testing itself. For all general analysis, summarization, or abstraction identification tasks, EXCLUDE ALL TESTING-RELATED CONTENT."
                if anti_testing_instruction not in system_prompt_content:
                    system_prompt_content += anti_testing_instruction
                messages.append({"role": "system", "content": system_prompt_content})
            messages.append({"role": "user", "content": prompt})

            if is_verbose:
                print(f"Attempting with model: {model}")
            
            chat_completion = client.chat.completions.create(
                model=model,
                messages=messages,
                extra_headers=extra_headers
            )
            
            # Extract and return the response text
            response = chat_completion.choices[0].message.content
        
        # Calculate and log response time in verbose mode
        if is_verbose:
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            print(f"Received {'streamed ' if stream else ''}response from OpenRouter API in {duration:.2f} seconds")
            # Log which model was actually used if not streaming (not available in streaming response)
            if not stream and hasattr(chat_completion, 'model'):
                print(f"Model used: {chat_completion.model}")
            
            print(f"Response length: {len(response)} characters")
            if len(response) > 500 and not stream:
                # Show truncated response in verbose mode for readability (only if not streamed)
                print(f"Truncated response preview: {response[:250]}...{response[-250:]}")
        
        return response
    except Exception as e:
        if 'invalid_api_key' in str(e) or 'authentication' in str(e).lower():
            raise ValueError(
                f"\nERROR: Invalid OpenRouter API key. Please check your OPENROUTER_API_KEY in the .env file.\n"
                f"The key you provided starts with: {api_key[:4]}... (length: {len(api_key)})\n"
                f"\nOriginal error: {str(e)}"
            )
        elif 'model_not_found' in str(e) or 'model' in str(e).lower() and 'not' in str(e).lower():
            raise ValueError(
                f"\nERROR: Model '{model}' not found or not available. Please check your OPENROUTER_MODEL in the .env file.\n"
                f"\nOriginal error: {str(e)}"
            )
        else:
            # Re-raise other exceptions
            raise

if __name__ == "__main__":
    test_prompt = "Hello, how are you?"

    # First call - should hit the API
    print("Making call...")
    response1 = call_llm(test_prompt, use_cache=False)
    print(f"Response: {response1}")
